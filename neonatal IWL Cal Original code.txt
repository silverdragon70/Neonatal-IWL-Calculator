import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { ChevronDown, ChevronUp, Info, AlertTriangle } from 'lucide-react';

// Constants moved outside component to prevent recreation on every render
const IWL_BASELINES = [
  { min: 0, max: 749, avgIWL: 150, category: '<750g' },
  { min: 750, max: 1000, avgIWL: 65, category: '750-1000g' },
  { min: 1001, max: 1250, avgIWL: 55, category: '1001-1250g' },
  { min: 1251, max: 1500, avgIWL: 35, category: '1251-1500g' },
  { min: 1501, max: 2000, avgIWL: 25, category: '1501-2000g' },
  { min: 2001, max: Infinity, avgIWL: 17.5, category: '>2000g' }
];

const ENVIRONMENTAL_FACTORS = [
  {
    id: 'radiantWarmer',
    label: 'Radiant Warmer Use',
    description: 'Open warming beds that increase insensible water loss',
    type: 'multiplier',
    value: 1.75,
    effect: 'increases IWL by 75%'
  },
  {
    id: 'phototherapy',
    label: 'Phototherapy',
    description: 'Light therapy that increases water loss (applies to LBW <2000g)',
    type: 'additive',
    value: 15,
    effect: 'adds 15 mL/kg/day for LBW infants'
  },
  {
    id: 'fever',
    label: 'Fever',
    description: 'Elevated body temperature increases metabolic demands',
    type: 'multiplier',
    value: 1.40,
    effect: 'increases IWL by 40%'
  },
  {
    id: 'humidifiedEnv',
    label: 'Humidified Environment',
    description: 'Incubator with humidity control reduces water loss',
    type: 'multiplier',
    value: 0.75,
    effect: 'decreases IWL by 25%'
  }
];

// Custom hook for IWL calculation
const useIWLCalculation = (birthWeight, factors) => {
  const [result, setResult] = useState(null);
  const [resultPerDay, setResultPerDay] = useState(null);
  const [error, setError] = useState('');
  const [details, setDetails] = useState('');
  const [isCalculating, setIsCalculating] = useState(false);

  const validateWeight = useCallback((weight) => {
    if (isNaN(weight) || weight <= 0) return "Please enter a valid birth weight";
    if (weight > 10000) return "Birth weight seems unusually high (>10kg)";
    if (weight < 200) return "Birth weight seems unusually low (<200g)";
    return null;
  }, []);

  const calculateIWL = useCallback(() => {
    setIsCalculating(true);
    setError('');
    setResult(null);
    setResultPerDay(null);
    setDetails('');

    const weight = parseFloat(birthWeight);
    const validationError = validateWeight(weight);
    
    if (validationError) {
      setError(validationError);
      setIsCalculating(false);
      return;
    }

    // Find baseline IWL
    const weightCategory = IWL_BASELINES.find(
      (category) => weight >= category.min && weight <= category.max
    );

    if (!weightCategory) {
      setError('Could not determine baseline IWL for the given weight.');
      setIsCalculating(false);
      return;
    }

    let baselineIWL = weightCategory.avgIWL;
    let adjustedIWL = baselineIWL;
    let details = `ðŸ“Š Baseline IWL for ${weightCategory.category}: ${baselineIWL.toFixed(2)} mL/kg/day\n\n`;

    let multiplier = 1.0;
    let adjustmentSteps = [];

    // Apply multiplier factors
    ENVIRONMENTAL_FACTORS.forEach(factor => {
      if (factors[factor.id] && factor.type === 'multiplier') {
        multiplier *= factor.value;
        const change = factor.value > 1 ? 'increased' : 'decreased';
        const percentage = Math.abs((factor.value - 1) * 100);
        adjustmentSteps.push(`   âœ“ ${factor.label}: ${change} by ${percentage}% (Ã—${factor.value})`);
      }
    });

    // Apply combined multiplier
    if (multiplier !== 1.0) {
      details += `ðŸ”§ Environmental Adjustments:\n`;
      details += adjustmentSteps.join('\n') + '\n';
      details += `   Combined Multiplier: ${multiplier.toFixed(2)}\n`;
      details += `   Adjusted IWL: ${baselineIWL.toFixed(2)} Ã— ${multiplier.toFixed(2)} = ${(baselineIWL * multiplier).toFixed(2)} mL/kg/day\n\n`;
      adjustedIWL *= multiplier;
    }

    // Apply additive factors (phototherapy)
    if (factors.phototherapy && weight <= 2000) {
      const phototherapyAdd = 15;
      details += `ðŸ’¡ Phototherapy Adjustment (LBW â‰¤2000g):\n`;
      details += `   Add ${phototherapyAdd} mL/kg/day\n`;
      details += `   Final IWL: ${adjustedIWL.toFixed(2)} + ${phototherapyAdd} = ${(adjustedIWL + phototherapyAdd).toFixed(2)} mL/kg/day\n\n`;
      adjustedIWL += phototherapyAdd;
    } else if (factors.phototherapy && weight > 2000) {
      details += `ðŸ’¡ Phototherapy: Not applied for infants >2000g\n\n`;
    }

    const finalIWLPerKgPerDay = parseFloat(adjustedIWL.toFixed(2));
    const iwlPerDay = parseFloat((adjustedIWL * (weight / 1000)).toFixed(2));

    details += `ðŸ“‹ Final Results:\n`;
    details += `   IWL per kg per day: ${finalIWLPerKgPerDay} mL/kg/day\n`;
    details += `   Total IWL per day: ${iwlPerDay} mL/day\n`;
    details += `   (${finalIWLPerKgPerDay} Ã— ${(weight/1000).toFixed(3)}kg = ${iwlPerDay} mL/day)`;

    setResult(finalIWLPerKgPerDay);
    setResultPerDay(iwlPerDay);
    setDetails(details);
    setIsCalculating(false);
  }, [birthWeight, factors, validateWeight]);

  return { result, resultPerDay, error, details, isCalculating, calculateIWL };
};

// Debounce utility
const useDebounce = (value, delay) => {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
};

// Tooltip component
const Tooltip = ({ children, content }) => {
  const [isVisible, setIsVisible] = useState(false);

  return (
    <div className="relative inline-block">
      <button
        type="button"
        className="ml-2 text-blue-500 hover:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 rounded-full p-1"
        onMouseEnter={() => setIsVisible(true)}
        onMouseLeave={() => setIsVisible(false)}
        onFocus={() => setIsVisible(true)}
        onBlur={() => setIsVisible(false)}
        aria-label="More information"
      >
        <Info size={16} />
      </button>
      {isVisible && (
        <div className="absolute z-10 w-64 p-2 mt-2 text-sm bg-gray-800 text-white rounded-lg shadow-lg -translate-x-1/2 left-1/2">
          {content}
          <div className="absolute w-2 h-2 bg-gray-800 transform rotate-45 -top-1 left-1/2 -translate-x-1/2"></div>
        </div>
      )}
    </div>
  );
};

// Weight input component
const WeightInput = ({ value, onChange, error }) => {
  const formatWeight = (inputValue) => {
    return inputValue.replace(/[^0-9.]/g, '');
  };

  const handleChange = (e) => {
    const formattedValue = formatWeight(e.target.value);
    onChange(formattedValue);
  };

  return (
    <div className="mb-5">
      <label htmlFor="birthWeight" className="block text-gray-700 text-sm font-semibold mb-2">
        Birth Weight (grams):
      </label>
      <input
        type="text"
        id="birthWeight"
        value={value}
        onChange={handleChange}
        placeholder="e.g., 1500"
        className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 ease-in-out shadow-sm ${
          error ? 'border-red-500 bg-red-50' : 'border-gray-300'
        }`}
        aria-label="Enter birth weight in grams"
        aria-invalid={error ? 'true' : 'false'}
        aria-describedby={error ? 'weight-error' : undefined}
      />
      {error && (
        <p id="weight-error" className="mt-1 text-sm text-red-600" role="alert">
          {error}
        </p>
      )}
    </div>
  );
};

// Environmental factors component
const EnvironmentalFactors = ({ factors, onChange }) => {
  return (
    <fieldset className="mb-6 space-y-3">
      <legend className="text-lg font-semibold text-gray-700 mb-3">
        Environmental Factors
      </legend>
      {ENVIRONMENTAL_FACTORS.map(factor => (
        <div key={factor.id} className="flex items-center">
          <input
            type="checkbox"
            id={factor.id}
            checked={factors[factor.id] || false}
            onChange={(e) => onChange(factor.id, e.target.checked)}
            className="form-checkbox h-5 w-5 text-blue-600 rounded-md focus:ring-blue-500 transition duration-150 ease-in-out"
            aria-describedby={`${factor.id}-description`}
          />
          <label htmlFor={factor.id} className="ml-3 text-gray-700 text-base cursor-pointer flex items-center">
            {factor.label}
            <Tooltip content={factor.description} />
          </label>
          <span id={`${factor.id}-description`} className="sr-only">
            {factor.description}
          </span>
        </div>
      ))}
    </fieldset>
  );
};

// Warning component
const WeightWarning = ({ weight }) => {
  const numWeight = parseFloat(weight);
  if (isNaN(numWeight)) return null;

  let warning = null;
  if (numWeight < 1000) {
    warning = "Extremely low birth weight - consider increased monitoring and more frequent assessments";
  } else if (numWeight < 1500) {
    warning = "Very low birth weight - close monitoring recommended";
  } else if (numWeight < 2500) {
    warning = "Low birth weight - monitor fluid balance carefully";
  }

  if (!warning) return null;

  return (
    <div className="mb-4 bg-yellow-50 border border-yellow-200 text-yellow-800 px-4 py-3 rounded-lg flex items-start">
      <AlertTriangle size={18} className="mr-2 mt-0.5 flex-shrink-0" />
      <span className="text-sm">{warning}</span>
    </div>
  );
};

// Result display component
const ResultDisplay = ({ result, resultPerDay, details, showDetails, onToggleDetails, isCalculating }) => {
  if (isCalculating) {
    return (
      <div className="mt-6 p-5 bg-blue-50 border border-blue-200 rounded-xl text-center shadow-md">
        <div className="animate-pulse">
          <div className="h-4 bg-blue-200 rounded w-3/4 mx-auto mb-4"></div>
          <div className="h-8 bg-blue-200 rounded w-1/2 mx-auto"></div>
        </div>
      </div>
    );
  }

  if (result === null) return null;

  return (
    <div className="mt-6 p-5 bg-blue-50 border border-blue-200 rounded-xl text-center shadow-md">
      <h2 className="text-xl font-semibold text-blue-800 mb-2">
        Estimated Insensible Water Loss:
      </h2>
      <p className="text-4xl font-extrabold text-blue-900">
        {result} <span className="text-2xl">mL/kg/day</span>
      </p>
      {resultPerDay !== null && (
        <p className="text-2xl font-bold text-blue-700 mt-3">
          = {resultPerDay} <span className="text-xl">mL/day</span>
        </p>
      )}

      <button
        onClick={onToggleDetails}
        className="mt-6 text-blue-700 font-medium flex items-center justify-center hover:underline focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 rounded-md p-2 mx-auto transition duration-150 ease-in-out"
        aria-expanded={showDetails}
        aria-controls="calculation-details"
      >
        <span className="text-base">
          {showDetails ? 'Hide' : 'Show'} calculation details
        </span>
        {showDetails ? <ChevronUp size={18} className="ml-1" /> : <ChevronDown size={18} className="ml-1" />}
      </button>

      {showDetails && (
        <pre
          id="calculation-details"
          className="mt-4 text-left bg-white text-gray-800 p-4 rounded-lg border border-gray-200 text-sm whitespace-pre-wrap leading-relaxed shadow-inner"
        >
          {details}
        </pre>
      )}
    </div>
  );
};

// Main App component
const App = () => {
  const [birthWeight, setBirthWeight] = useState('');
  const [factors, setFactors] = useState({
    radiantWarmer: false,
    phototherapy: false,
    fever: false,
    humidifiedEnv: false
  });
  const [showDetails, setShowDetails] = useState(false);

  // Debounce birth weight input
  const debouncedBirthWeight = useDebounce(birthWeight, 300);

  // Use custom hook for calculation
  const { result, resultPerDay, error, details, isCalculating, calculateIWL } = useIWLCalculation(debouncedBirthWeight, factors);

  // Handle factor changes
  const handleFactorChange = useCallback((factorId, checked) => {
    setFactors(prev => ({
      ...prev,
      [factorId]: checked
    }));
  }, []);

  // Auto-calculate when inputs change
  useEffect(() => {
    if (debouncedBirthWeight !== '') {
      calculateIWL();
    }
  }, [debouncedBirthWeight, factors, calculateIWL]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-100 to-indigo-200 flex items-center justify-center p-4">
      <div className="bg-white p-8 rounded-2xl shadow-xl w-full max-w-lg border border-blue-200">
        <header className="text-center mb-6">
          {/* Logo */}
          <div className="flex justify-center mb-4">
            <div className="bg-gradient-to-br from-blue-500 to-blue-700 p-4 rounded-full shadow-lg">
              <svg width="48" height="48" viewBox="0 0 48 48" className="text-white">
                <defs>
                  <linearGradient id="dropGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" stopColor="#60A5FA" />
                    <stop offset="100%" stopColor="#3B82F6" />
                  </linearGradient>
                </defs>
                {/* Water drop symbol */}
                <path 
                  d="M24 8C24 8 12 20 12 28C12 34.627 17.373 40 24 40C30.627 40 36 34.627 36 28C36 20 24 8 24 8Z" 
                  fill="url(#dropGradient)" 
                  stroke="white" 
                  strokeWidth="2"
                />
                {/* Baby symbol inside */}
                <circle cx="24" cy="26" r="6" fill="white" opacity="0.9" />
                <circle cx="22" cy="24" r="1.5" fill="#3B82F6" />
                <circle cx="26" cy="24" r="1.5" fill="#3B82F6" />
                <path d="M20 28 Q24 30 28 28" stroke="#3B82F6" strokeWidth="1.5" fill="none" strokeLinecap="round" />
              </svg>
            </div>
          </div>
          
          <h1 className="text-3xl font-extrabold text-blue-800 mb-2">
            Neonatal IWL Calculator
          </h1>
          <p className="text-gray-600 text-sm">
            Calculate Insensible Water Loss for neonates
          </p>
        </header>

        <div aria-label="IWL Calculator Form">
          <WeightInput
            value={birthWeight}
            onChange={setBirthWeight}
            error={error}
          />

          <WeightWarning weight={birthWeight} />

          <EnvironmentalFactors
            factors={factors}
            onChange={handleFactorChange}
          />

          <button
            type="button"
            onClick={calculateIWL}
            disabled={!birthWeight || isCalculating}
            className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white font-bold py-3 px-4 rounded-xl transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-75 shadow-lg"
            aria-label="Calculate Insensible Water Loss"
          >
            {isCalculating ? 'Calculating...' : 'Calculate IWL'}
          </button>
        </div>

        <ResultDisplay
          result={result}
          resultPerDay={resultPerDay}
          details={details}
          showDetails={showDetails}
          onToggleDetails={() => setShowDetails(!showDetails)}
          isCalculating={isCalculating}
        />

        <footer className="mt-6 bg-gray-50 border border-gray-200 p-4 rounded-xl text-sm text-gray-600">
          <details>
            <summary className="cursor-pointer font-semibold text-gray-700 hover:text-gray-900">
              References & Clinical Notes
            </summary>
            <div className="mt-2 space-y-2">
              <p><strong>References:</strong></p>
              <ul className="list-disc list-inside space-y-1 text-xs">
                <li>Cloherty and Stark's Manual of Neonatal Care, 8th Ed. (Chapter 23)</li>
                <li>Gomella's Neonatology, 8th Ed. (Chapter 10)</li>
              </ul>
              <p className="mt-2 text-xs text-gray-500">
                <strong>Note:</strong> This calculator provides estimates for clinical guidance. 
                Individual patient factors may require adjustment of fluid management plans.
              </p>
            </div>
          </details>
        </footer>

        {/* Medical Disclaimer */}
        <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-xl">
          <div className="flex items-start space-x-2">
            <div className="flex-shrink-0 mt-0.5">
              <svg className="w-5 h-5 text-red-500" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
              </svg>
            </div>
            <div>
              <h3 className="text-sm font-semibold text-red-800 mb-1">Medical Disclaimer</h3>
              <p className="text-xs text-red-700 leading-relaxed">
                <strong>Important:</strong> This calculator is for educational and informational purposes only. 
                The information provided may not be accurate and should not be considered as medical advice. 
                Always consult with a qualified healthcare professional or neonatologist before making any 
                clinical decisions. This tool does not replace professional medical judgment, clinical assessment, 
                or established protocols. Healthcare providers must verify all calculations and consider individual 
                patient factors, institutional guidelines, and current evidence-based practices.
              </p>
              <p className="text-xs text-red-600 mt-2 font-medium">
                Use of this calculator is at your own risk. The developers assume no responsibility for any 
                clinical decisions made based on this tool.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default App;